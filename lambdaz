// task 1

@FunctionalInterface
interface MathOperation {
    int operate(int a, int b);
}

public class Main {
    public static void main(String[] args) {
        MathOperation addition = (a, b) -> a + b;
        MathOperation subtraction = (a, b) -> a - b;
        MathOperation multiplication = (a, b) -> a * b;
        MathOperation division = (a, b) -> a / b;
        
        System.out.println("Addition: " + addition.operate(7, 3));
        System.out.println("Subtraction: " + subtraction.operate(7, 3));
        System.out.println("Multiplication: " + multiplication.operate(7, 3));
        System.out.println("Division: " + division.operate(7, 3));
    }
}

// task 2

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(10, 15, 22, 33, 40, 55);
        Predicate<Integer> isOdd = num -> num % 2 != 0;
        
        List<Integer> oddNumbers = new ArrayList<>();
        for (Integer num : numbers) {
            if (isOdd.test(num)) {
                oddNumbers.add(num);
            }
        }
        
        System.out.println("Odd Numbers: " + oddNumbers);
    }
}

// task 3

public class Main {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");
        
        Collections.sort(names, (a, b) -> b.compareTo(a));
        
        System.out.println("Sorted Names: " + names);
    }
}


// task 4

public class Main {
    public static void main(String[] args) {
        List<String> words = Arrays.asList("hello", "java", "lambda");
        Function<String, String> transform = s -> 
            new StringBuilder(s.toUpperCase()).reverse().toString();
        
        List<String> transformed = new ArrayList<>();
        for (String word : words) {
            transformed.add(transform.apply(word));
        }
        
        System.out.println("Transformed Strings: " + transformed);
    }
}

// task 5

public class Main {
    public static void main(String[] args) {
        List<String> cities = Arrays.asList("New York", "London", "Tokyo", "Berlin");
        Consumer<String> printConsumer = city -> System.out.println(city);
        
        for (String city : cities) {
            printConsumer.accept(city);
        }
    }
}

// task 6

public class Main {
    public static void main(String[] args) {
        List<String> cities = Arrays.asList("New York", "London", "Tokyo", "Berlin");
        cities.forEach(System.out::println);
    }
}

// task 7

public class Main {
    public static void main(String[] args) {
        int a = 25, b = 40;
        
        BiFunction<Integer, Integer, Integer> max = (x, y) -> x > y ? x : y;
        BiFunction<Integer, Integer, Integer> min = (x, y) -> x < y ? x : y;
        
        System.out.println("Max: " + max.apply(a, b));
        System.out.println("Min: " + min.apply(a, b));
    }
}
